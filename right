local location
-- Delay function for 5-10 seconds
local function delay()
    local delayTime = math.random(15, 16)
    wait(delayTime)

local function myFunction(count)
    local args = {
    [1] = {
        [1] = "Respawn"
    }
}
game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
    
    -- Stop the loop after the function has executed twice
    if count == 1 then
        return
    end
    
    -- Increment the count variable
    count = count + 1
    
    -- Wait for 5 seconds
    wait(5)
    
    -- Call the function again
    spawn(function()
        myFunction(count)
    end)
end

-- Call the function to start the loop
myFunction(0)

repeat wait() until(game:GetService("Players").LocalPlayer)
local plr = game:GetService("Players").LocalPlayer

repeat wait() until(plr.Character)

coroutine.wrap(function()
    game:WaitForChild("CoreGui")
    game.RunService.Stepped:connect(function()
        if game:GetService("CoreGui").RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt") then
            game:GetService("TeleportService"):Teleport(game.PlaceId)
        end
    end)
end){}
local function FarmTool(tool)
    if plr.Character:FindFirstChild(tool) then
        plr.Character[tool]:Activate()
    else
        if plr.Backpack:FindFirstChild(tool) then
            plr.Character.Humanoid:EquipTool(plr.Backpack[tool])
        end
    end
end
local function CheckIfChar(String)
    if plr.Character then
        if plr.Character:FindFirstChild(String) then
            return(true)
        end
    end
    return(false)
end
local function kill(path, object)
    for i, v in ipairs(path:GetChildren()) do
        if path:FindFirstChild(object) then
            path[object]:Destroy()
            return(true)
        end
    end
    return(false)
end
if not plr.Character then
    Notification.Notify("Lost AutoFarm", "Spawning in..", NotifIcon, DefaultNotificationSettings(5))
    repeat
        game:GetService("ReplicatedStorage").RemoteEvent:FireServer({[1] = "Respawn"})
        wait(1)
    until(game:GetService("Workspace"):FindFirstChild(plr.Name))
    plr.PlayerGui.IntroGui.Enabled = false
    plr.PlayerGui.ScreenGui.Enabled = true
    game:GetService("Lighting").Blur.Enabled = false
    wait(1)
    kill(plr.Character, "ForceField")
    game:GetService("ReplicatedStorage").RemoteEvent:FireServer({[1] = "ConcealRevealAura"})
else
    game:GetService("ReplicatedStorage").RemoteEvent:FireServer({[1] = "Respawn"})
    plr.CharacterAdded:Wait()
    wait(1)
    plr.PlayerGui.IntroGui.Enabled = false
    plr.PlayerGui.ScreenGui.Enabled = true
    game:GetService("Lighting").Blur.Enabled = false
    kill(plr.Character, "ForceField")
    game:GetService("ReplicatedStorage").RemoteEvent:FireServer({[1] = "ConcealRevealAura"})
end
-- Anti Afk
game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    wait(1)
    game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
wait(5)
coroutine.wrap(function()
    local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
    while wait() do
        -- if Utility:IsChar() then
            if plr.Character.Humanoid.Health <= 0 then
                -- Serverhop from infinite yield hub, all credits to infinite yield devs. --
                if httprequest then
                    local servers = {}
                    local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100", game.PlaceId)})
                    local body = game:GetService("HttpService"):JSONDecode(req.Body)
                    if body and body.data then
                        for _, v in next, body.data do
                            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                                table.insert(servers, 1, v.id)
                            end
                        end
                    end
                    if #servers > 0 then
                        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], plr)
                    else
                        game:GetService("TeleportService"):Teleport(game.PlaceId)
                    end
                end
                ----------------------------------------------------------------------------
            end
        -- end
    end
end){}
if CheckIfChar("HumanoidRootPart") and CheckIfChar("Humanoid") then
    plr.Character.HumanoidRootPart.CFrame = CFrame.new("location")
end
end

-- Call the delay function
delay()
